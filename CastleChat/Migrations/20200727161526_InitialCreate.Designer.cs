// <auto-generated />
using System;
using CastleChat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CastleChat.Migrations
{
    [DbContext(typeof(CastleChatContext))]
    [Migration("20200727161526_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CastleChat.Models.Castle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("castles");
                });

            modelBuilder.Entity("CastleChat.Models.Discussion", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("authorid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("pubDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("roomid")
                        .HasColumnType("bigint");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("authorid");

                    b.HasIndex("roomid");

                    b.ToTable("discussions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Discussion");
                });

            modelBuilder.Entity("CastleChat.Models.Room", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Castleid")
                        .HasColumnType("bigint");

                    b.Property<long>("authorid")
                        .HasColumnType("bigint");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Castleid");

                    b.HasIndex("authorid");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("CastleChat.Models.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("regDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CastleChat.Models.DiscussionReply", b =>
                {
                    b.HasBaseType("CastleChat.Models.Discussion");

                    b.Property<long>("discussionid")
                        .HasColumnType("bigint");

                    b.HasIndex("discussionid");

                    b.HasDiscriminator().HasValue("DiscussionReply");
                });

            modelBuilder.Entity("CastleChat.Models.Discussion", b =>
                {
                    b.HasOne("CastleChat.Models.User", "author")
                        .WithMany()
                        .HasForeignKey("authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CastleChat.Models.Room", "room")
                        .WithMany("discussions")
                        .HasForeignKey("roomid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CastleChat.Models.Room", b =>
                {
                    b.HasOne("CastleChat.Models.Castle", null)
                        .WithMany("rooms")
                        .HasForeignKey("Castleid");

                    b.HasOne("CastleChat.Models.User", "author")
                        .WithMany()
                        .HasForeignKey("authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CastleChat.Models.DiscussionReply", b =>
                {
                    b.HasOne("CastleChat.Models.Discussion", "discussion")
                        .WithMany("replies")
                        .HasForeignKey("discussionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
